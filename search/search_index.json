{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"about/","text":"","title":"About"},{"location":"action/","text":"See the StrucEng Library in Action Video Tour Screenshots Pictures below are based on version v0.0.13 and later. They may change in future versions. StrucEng Library Plugin in Action Analysis Step Settings in Linear FE model Sandwich Model Analysis Settings","title":"See in Action"},{"location":"action/#see-the-struceng-library-in-action","text":"","title":"See the StrucEng Library in Action"},{"location":"action/#video-tour","text":"","title":"Video Tour"},{"location":"action/#screenshots","text":"Pictures below are based on version v0.0.13 and later. They may change in future versions. StrucEng Library Plugin in Action Analysis Step Settings in Linear FE model Sandwich Model Analysis Settings","title":"Screenshots"},{"location":"home/","text":"The StrucEng Library snippets includes all functionalities for the strucutral analysis of concrete, reinfroced concrete and masonry. The following page shows the implemented functionalites and the most import high level methods and attributes of the StrucEng Library. In the background the compas and compas_fea is used for the communications between the front- and backend (the credits for developing this packages goes to the guys of the Block research group: check out www.compas.dev theier amazing work).","title":"Home"},{"location":"compas_fea/analysis/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Results"},{"location":"compas_fea/basics/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Basics"},{"location":"compas_fea/dev_notes/","text":"Coming soon","title":"Developer Notes"},{"location":"compas_fea/displacements/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Steps"},{"location":"compas_fea/elements/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Sets"},{"location":"compas_fea/home/","text":"Coming Soon","title":"Home"},{"location":"compas_fea/loads/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Loads"},{"location":"compas_fea/materials/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Properties"},{"location":"compas_fea/nodes/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Elements"},{"location":"compas_fea/properties/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Constraints"},{"location":"compas_fea/sections/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Sections"},{"location":"compas_fea/sets/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Materials"},{"location":"compas_fea/steps/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Analyses"},{"location":"compas_fea/structure/","text":"Check out https://compas.dev/compas_fea/latest/","title":"Structure"},{"location":"strucenglib_plugin/eth_zurich_members/","text":"StrucEng Library within ETH Zurich Rhino Floating License ETH Zurich members may use a free floating license with Rhino Cloud Zoo when connected with VPN. Abaqus Abaqus FEA is a software suite for finite element analysis and computer-aided engineering. Its installation cannot be automated. For ETH Zurich members, order a free copy via IT shop: Abaqus 2021 Follow installation instructions in IT shop: Install: ..\\AM_SIM_Abaqus_Extend.AllOS\\1\\setup.exe License Server (ETH VPN): SIMULIA FLEXnet with License Server: 1973@lic-abaqus-teaching.ethz.ch","title":"StrucEng Library within ETH Zurich"},{"location":"strucenglib_plugin/eth_zurich_members/#struceng-library-within-eth-zurich","text":"","title":"StrucEng Library within ETH Zurich"},{"location":"strucenglib_plugin/eth_zurich_members/#rhino-floating-license","text":"ETH Zurich members may use a free floating license with Rhino Cloud Zoo when connected with VPN.","title":"Rhino Floating License"},{"location":"strucenglib_plugin/eth_zurich_members/#abaqus","text":"Abaqus FEA is a software suite for finite element analysis and computer-aided engineering. Its installation cannot be automated. For ETH Zurich members, order a free copy via IT shop: Abaqus 2021 Follow installation instructions in IT shop: Install: ..\\AM_SIM_Abaqus_Extend.AllOS\\1\\setup.exe License Server (ETH VPN): SIMULIA FLEXnet with License Server: 1973@lic-abaqus-teaching.ethz.ch","title":"Abaqus"},{"location":"strucenglib_plugin/home/","text":"StrucEng Library Rhinoceros Plugin The StrucEng Library Plugin unites and extends Finite Element Analysis of Compas FEA into Rhinoceros 3D . It features Rhino user-interfaces and bundles various FE models to support the structural analysis of reinforced concrete and masonry. We currently implement Rhinoceros 3D support for the following FEA Analysis solvers: .grid-cols-2 { width: 100%; height: 100%; display: grid; grid-template-columns: repeat(2, 1fr); gap: 4rem; } .view_more_btn { width: 180px; height: 55px; display: flex; align-items: center; justify-content: center; font-size: 16px; letter-spacing: 0; color: #fff; font-weight: 500; margin-right: 10px; box-shadow: 0 0.5rem 1.5rem rgba(22, 28, 45, 0.1); } .view_more_btn i { margin-left: 0.7rem; } .view_more_btn:hover { transition: box-shadow 0.25s ease, transform 0.25s ease; } .grid-item-2 { width: 100%; height: 100%; } .team_img_wrapper { width: 500px; max-width: 100%; height: 440px; } .team_img_wrapper img { width: 100%; height: 100%; object-fit: contain; } .grid-cols-3 { width: 100%; height: 100%; display: grid; grid-template-columns: repeat(3, 1fr); column-gap: 3rem; row-gap: 2rem; padding: 1rem; } .grid-col-item { height: 100%; } .icon { width: 100%; line-height: 40px; } .icon svg { width: 30px; height: 30px; color: #6b85d8; } .featured_info { width: 100%; } .featured_info span { width: 100%; display: block; font-size: 21px; line-height: 33px; color: var(header-text-color); } .featured_info p { display: block; width: 100%; margin-top: 7px; font-weight: 400; color: #334157; line-height: 25px; font-size: 15.5px; } .components { background-color: white; color: black !important; margin-top: 2rem; } .components-title { text-align: center; margin-bottom: 2rem; } .components-feat { margin-top: 3rem; } .components-feat-box { padding: 35px 40px 25px 40px; border-radius: 5px; text-align: center; background: #fff; box-shadow: rgb(0 0 0 / 1%) 0 1px 0, rgb(0 0 0 / 3%) 0 0 8px, rgb(0 0 0 / 8%) 0 20px 30px; } .components-feat-box:hover { box-shadow: rgb(0 0 0 / 5%) 0 1px 0, rgb(0 0 0 / 10%) 0 0 8px, rgb(0 0 0 / 15%) 0 20px 30px; } .components-feat-box-text { min-height: 7rem; text-align: left; justify-content: space-between; flex-direction: column; display: flex; } .components-feat-img { border-radius: 50%; } .components-but { display: block; justify-content: flex-end; display: flex; } .components-but a:hover { color: var(--primary-color); font-weight: bold; } Support for Abaqus Install the StrucEng Library Rhinoceros Plugin with support for Abaqus Mechanical and Civil Engineering Simulation . Install Support for Ansys Install the StrucEng Library Rhinoceros Plugin with support for Ansys Structural FEA Analysis Software . Install The following pages will assist the installation of the plugin in Rhinoceros 3D. Start with the Prerequisite Steps to ensure you have all necessary software components installed.","title":"Home"},{"location":"strucenglib_plugin/home/#struceng-library-rhinoceros-plugin","text":"The StrucEng Library Plugin unites and extends Finite Element Analysis of Compas FEA into Rhinoceros 3D . It features Rhino user-interfaces and bundles various FE models to support the structural analysis of reinforced concrete and masonry. We currently implement Rhinoceros 3D support for the following FEA Analysis solvers: .grid-cols-2 { width: 100%; height: 100%; display: grid; grid-template-columns: repeat(2, 1fr); gap: 4rem; } .view_more_btn { width: 180px; height: 55px; display: flex; align-items: center; justify-content: center; font-size: 16px; letter-spacing: 0; color: #fff; font-weight: 500; margin-right: 10px; box-shadow: 0 0.5rem 1.5rem rgba(22, 28, 45, 0.1); } .view_more_btn i { margin-left: 0.7rem; } .view_more_btn:hover { transition: box-shadow 0.25s ease, transform 0.25s ease; } .grid-item-2 { width: 100%; height: 100%; } .team_img_wrapper { width: 500px; max-width: 100%; height: 440px; } .team_img_wrapper img { width: 100%; height: 100%; object-fit: contain; } .grid-cols-3 { width: 100%; height: 100%; display: grid; grid-template-columns: repeat(3, 1fr); column-gap: 3rem; row-gap: 2rem; padding: 1rem; } .grid-col-item { height: 100%; } .icon { width: 100%; line-height: 40px; } .icon svg { width: 30px; height: 30px; color: #6b85d8; } .featured_info { width: 100%; } .featured_info span { width: 100%; display: block; font-size: 21px; line-height: 33px; color: var(header-text-color); } .featured_info p { display: block; width: 100%; margin-top: 7px; font-weight: 400; color: #334157; line-height: 25px; font-size: 15.5px; } .components { background-color: white; color: black !important; margin-top: 2rem; } .components-title { text-align: center; margin-bottom: 2rem; } .components-feat { margin-top: 3rem; } .components-feat-box { padding: 35px 40px 25px 40px; border-radius: 5px; text-align: center; background: #fff; box-shadow: rgb(0 0 0 / 1%) 0 1px 0, rgb(0 0 0 / 3%) 0 0 8px, rgb(0 0 0 / 8%) 0 20px 30px; } .components-feat-box:hover { box-shadow: rgb(0 0 0 / 5%) 0 1px 0, rgb(0 0 0 / 10%) 0 0 8px, rgb(0 0 0 / 15%) 0 20px 30px; } .components-feat-box-text { min-height: 7rem; text-align: left; justify-content: space-between; flex-direction: column; display: flex; } .components-feat-img { border-radius: 50%; } .components-but { display: block; justify-content: flex-end; display: flex; } .components-but a:hover { color: var(--primary-color); font-weight: bold; } Support for Abaqus Install the StrucEng Library Rhinoceros Plugin with support for Abaqus Mechanical and Civil Engineering Simulation . Install Support for Ansys Install the StrucEng Library Rhinoceros Plugin with support for Ansys Structural FEA Analysis Software . Install The following pages will assist the installation of the plugin in Rhinoceros 3D. Start with the Prerequisite Steps to ensure you have all necessary software components installed.","title":"StrucEng Library Rhinoceros Plugin"},{"location":"strucenglib_plugin/install_for_abaqus/","text":"The StrucEngLib plugin issues a Finite Element Analysis Solver under-the-hood. Ensure to have Prerequisites installed before you continue. Install Abaqus Install Simula Abaqus Software . This software is propietary and needs a license. Note A third party Installation guide for Abaqus can be found here . Steps to connect to license server for ETH Zurich members . Note that if you are using StrucEngLib Remote Server , no finite element analysis solver is required. Install Rhinoceros 3D Plugin Fire up Rhinoceros 3D and type PackageManager in Rhino command line. Search for StrucEngLibPlugin in the search bar. Select the latest version, then hit install, and restart Rhino. Rhino Package Manager Note For a list of recent changes, see the changelog . If you are interested in developer builds, enable Include pre-releases . Menu bar and Command integration Upon restart, the plugin integrates into Rhino menu bar and is accessible under Tools - StrucEngLib Plugin as well as in the command line with StrucEngLib* . If plugin load fails with an error, ensure that the plugin is loaded in PluginManager settings: Post Installation Upon installation of the plugin, various Python dependencies must be downloaded. Download Dependencies Type StrucEngLibInstallDependencies in Rhino command line to open the dialog shown below. StrucEng Library Dependency Installer for Abaqus Select Select Directory and choose your Anacoda installation path ( Prerequisites ). Create a new environment with Create Environment . The StrucEngLib Plugin issues Anaconda to create a new virtual environment and install all required Python dependencies. Hit Install for Abaqus to download the software packages. The installation may take some minutes. Subsequently, press Test Import to verify installation. Upon failure, an error message is shown. Note The installer uses Compas to install Python dependencies into Rhino's include directory %AppData%\\McNeel\\Rhinoceros\\7.0\\scripts . Ensure that your Windows Environment variable %PYTHONPATH% is not set. If you changed Rhino's Modules Search Path in Python Editor, please remove them ( Why ). Install Script: install_abaqus.bat .","title":"Install for Abaqus"},{"location":"strucenglib_plugin/install_for_abaqus/#install-abaqus","text":"Install Simula Abaqus Software . This software is propietary and needs a license. Note A third party Installation guide for Abaqus can be found here . Steps to connect to license server for ETH Zurich members . Note that if you are using StrucEngLib Remote Server , no finite element analysis solver is required.","title":"Install Abaqus"},{"location":"strucenglib_plugin/install_for_abaqus/#install-rhinoceros-3d-plugin","text":"Fire up Rhinoceros 3D and type PackageManager in Rhino command line. Search for StrucEngLibPlugin in the search bar. Select the latest version, then hit install, and restart Rhino. Rhino Package Manager Note For a list of recent changes, see the changelog . If you are interested in developer builds, enable Include pre-releases .","title":"Install Rhinoceros 3D Plugin"},{"location":"strucenglib_plugin/install_for_abaqus/#menu-bar-and-command-integration","text":"Upon restart, the plugin integrates into Rhino menu bar and is accessible under Tools - StrucEngLib Plugin as well as in the command line with StrucEngLib* . If plugin load fails with an error, ensure that the plugin is loaded in PluginManager settings:","title":"Menu bar and Command integration"},{"location":"strucenglib_plugin/install_for_abaqus/#post-installation","text":"Upon installation of the plugin, various Python dependencies must be downloaded.","title":"Post Installation"},{"location":"strucenglib_plugin/install_for_abaqus/#download-dependencies","text":"Type StrucEngLibInstallDependencies in Rhino command line to open the dialog shown below. StrucEng Library Dependency Installer for Abaqus Select Select Directory and choose your Anacoda installation path ( Prerequisites ). Create a new environment with Create Environment . The StrucEngLib Plugin issues Anaconda to create a new virtual environment and install all required Python dependencies. Hit Install for Abaqus to download the software packages. The installation may take some minutes. Subsequently, press Test Import to verify installation. Upon failure, an error message is shown. Note The installer uses Compas to install Python dependencies into Rhino's include directory %AppData%\\McNeel\\Rhinoceros\\7.0\\scripts . Ensure that your Windows Environment variable %PYTHONPATH% is not set. If you changed Rhino's Modules Search Path in Python Editor, please remove them ( Why ). Install Script: install_abaqus.bat .","title":"Download Dependencies"},{"location":"strucenglib_plugin/install_for_ansys/","text":"The StrucEngLib plugin issues a Finite Element Analysis Solver under-the-hood. Ensure to have Prerequisites installed before you continue. Install Ansys Install Ansys Structural FEA Analysis Software . This software is proprietary and needs a license. Note Note that if you are using StrucEngLib Remote Server , no finite element analysis solver is required. Install Rhinoceros 3D Plugin Fire up Rhinoceros 3D and type PackageManager in Rhino command line. Search for StrucEngLibPlugin in the search bar. Select the latest version, then hit install, and restart Rhino. Rhino Package Manager Menu bar and Command integration Upon restart, the plugin integrates into Rhino menu bar and is accessible under Tools - StrucEngLib Plugin as well as in the command line with StrucEngLib* . If plugin load fails with an error, ensure that the plugin is loaded in PluginManager settings: Post Installation Upon installation of the plugin, various Python dependencies must be downloaded. Download Dependencies Type StrucEngLibInstallDependencies in Rhino command line to open the dialog shown below. StrucEng Library Dependency Installer for Ansys Select Select Directory and choose your Anacoda installation path ( Prerequisites ). Create a new environment with Create Environment . The StrucEngLib Plugin issues Anaconda to create a new virtual environment and install all required Python dependencies. Hit Install for Ansys to download the software packages. The installation may take some minutes. Subsequently, press Test Import to verify installation. Upon failure, an error message is shown. Note The installer uses Compas to install Python dependencies into Rhino's include directory %AppData%\\McNeel\\Rhinoceros\\7.0\\scripts . Ensure that your Windows Environment variable %PYTHONPATH% is not set. If you changed Rhino's Modules Search Path in Python Editor, please remove them ( Why ). Install Script: install_ansys.bat .","title":"Install for Ansys"},{"location":"strucenglib_plugin/install_for_ansys/#install-ansys","text":"Install Ansys Structural FEA Analysis Software . This software is proprietary and needs a license. Note Note that if you are using StrucEngLib Remote Server , no finite element analysis solver is required.","title":"Install Ansys"},{"location":"strucenglib_plugin/install_for_ansys/#install-rhinoceros-3d-plugin","text":"Fire up Rhinoceros 3D and type PackageManager in Rhino command line. Search for StrucEngLibPlugin in the search bar. Select the latest version, then hit install, and restart Rhino. Rhino Package Manager","title":"Install Rhinoceros 3D Plugin"},{"location":"strucenglib_plugin/install_for_ansys/#menu-bar-and-command-integration","text":"Upon restart, the plugin integrates into Rhino menu bar and is accessible under Tools - StrucEngLib Plugin as well as in the command line with StrucEngLib* . If plugin load fails with an error, ensure that the plugin is loaded in PluginManager settings:","title":"Menu bar and Command integration"},{"location":"strucenglib_plugin/install_for_ansys/#post-installation","text":"Upon installation of the plugin, various Python dependencies must be downloaded.","title":"Post Installation"},{"location":"strucenglib_plugin/install_for_ansys/#download-dependencies","text":"Type StrucEngLibInstallDependencies in Rhino command line to open the dialog shown below. StrucEng Library Dependency Installer for Ansys Select Select Directory and choose your Anacoda installation path ( Prerequisites ). Create a new environment with Create Environment . The StrucEngLib Plugin issues Anaconda to create a new virtual environment and install all required Python dependencies. Hit Install for Ansys to download the software packages. The installation may take some minutes. Subsequently, press Test Import to verify installation. Upon failure, an error message is shown. Note The installer uses Compas to install Python dependencies into Rhino's include directory %AppData%\\McNeel\\Rhinoceros\\7.0\\scripts . Ensure that your Windows Environment variable %PYTHONPATH% is not set. If you changed Rhino's Modules Search Path in Python Editor, please remove them ( Why ). Install Script: install_ansys.bat .","title":"Download Dependencies"},{"location":"strucenglib_plugin/prerequisites/","text":"Prerequisites The StrucEngLib Plugin is currently supported for Microsoft Windows. For installation, ensure you have the following prerequisites installed. Install Rhinoceros 3D The StrucEngLib Plugin is built as a RhinoCommon plugin. Ensure you have a recent version Rhinoceros \u00ae installed. Note We tested and wrote the plugin for Version 7 SR19 or later Steps for ETH Zurich members Install Anacoda The StrucEng Library requires Python and Anaconda installed. Download the Anaconda installer for Windows (64-Bit Graphical Installer) and follow the installation steps. Default options in the installer suffice.","title":"Prerequisites"},{"location":"strucenglib_plugin/prerequisites/#prerequisites","text":"The StrucEngLib Plugin is currently supported for Microsoft Windows. For installation, ensure you have the following prerequisites installed.","title":"Prerequisites"},{"location":"strucenglib_plugin/prerequisites/#install-rhinoceros-3d","text":"The StrucEngLib Plugin is built as a RhinoCommon plugin. Ensure you have a recent version Rhinoceros \u00ae installed. Note We tested and wrote the plugin for Version 7 SR19 or later Steps for ETH Zurich members","title":"Install Rhinoceros 3D"},{"location":"strucenglib_plugin/prerequisites/#install-anacoda","text":"The StrucEng Library requires Python and Anaconda installed. Download the Anaconda installer for Windows (64-Bit Graphical Installer) and follow the installation steps. Default options in the installer suffice.","title":"Install Anacoda"},{"location":"strucenglib_plugin/server/","text":"StrucEngLib Server The StrucEng Library features a server component to run FEA solvers on a remote host. This simplifies configuration setup and increases execution speed as FEA computations are remotely executed. Architecture StrucEngLib Server Run the Server A server instance is deployed on ibkpika host. When connected to ETH network, browse http://ibkpika.ethz.ch:8080/ to access the server log. The server log shows remote computation status logs. You may access the log during remote computations to keep track of computation results. Connect to Server In Rhino 3D, ensure to have latest strucenglib plugin version installed. Ensure to re-run StrucEnglibInstallDependencies command in Rhino to update all Python dependencies. Configuration Configure the remote server in Settings Tab . Set the remote server to endpoint ws://ibkpika.ethz.ch:8080/api/compute . Select Execute on Remote Server and inspect or execute model. The FEA computation will then be executed on remote server. Note You must be connected to ETH VPN to issue requests to the server (Wifi connection itself is not sufficient) Generated Code Remote computations outsource Compas FEA analyse_and_extract invocations to the server. The following snippet is auto generated with Rhino 3D StrucEng Library Plugin. from compas_fea.structure import Structure from strucenglib_connect import connect mdl = Structure ( name = 'Rahmen' , path = 'C:\\Temp' ) # ... # 1. Run locally mdl . analyse_and_extract ( software = 'abaqus' , fields = [ 'sf' , 'sm' ] ) # 2. or Run on Sever instead mdl = connect . analyse_and_extract ( 'ws://ibkpika.ethz.ch:8080/api/compute' , mdl , software = 'abaqus' , fields = [ 'sf' , 'sm' ]) # ... Analyse_and_extract can either be executed locally (1.) or remotely (2.). Remote and local invocations accept the same set of compas FEA parameters. The connection layer strucenglib-connect acts as a proxy which serializes and forwards model data to the remote server. Source Code The server component and more implementation details are available on GitHub .","title":"StrucEngLib Server"},{"location":"strucenglib_plugin/server/#strucenglib-server","text":"The StrucEng Library features a server component to run FEA solvers on a remote host. This simplifies configuration setup and increases execution speed as FEA computations are remotely executed. Architecture StrucEngLib Server","title":"StrucEngLib Server"},{"location":"strucenglib_plugin/server/#run-the-server","text":"A server instance is deployed on ibkpika host. When connected to ETH network, browse http://ibkpika.ethz.ch:8080/ to access the server log. The server log shows remote computation status logs. You may access the log during remote computations to keep track of computation results.","title":"Run the Server"},{"location":"strucenglib_plugin/server/#connect-to-server","text":"In Rhino 3D, ensure to have latest strucenglib plugin version installed. Ensure to re-run StrucEnglibInstallDependencies command in Rhino to update all Python dependencies.","title":"Connect to Server"},{"location":"strucenglib_plugin/server/#configuration","text":"Configure the remote server in Settings Tab . Set the remote server to endpoint ws://ibkpika.ethz.ch:8080/api/compute . Select Execute on Remote Server and inspect or execute model. The FEA computation will then be executed on remote server. Note You must be connected to ETH VPN to issue requests to the server (Wifi connection itself is not sufficient)","title":"Configuration"},{"location":"strucenglib_plugin/server/#generated-code","text":"Remote computations outsource Compas FEA analyse_and_extract invocations to the server. The following snippet is auto generated with Rhino 3D StrucEng Library Plugin. from compas_fea.structure import Structure from strucenglib_connect import connect mdl = Structure ( name = 'Rahmen' , path = 'C:\\Temp' ) # ... # 1. Run locally mdl . analyse_and_extract ( software = 'abaqus' , fields = [ 'sf' , 'sm' ] ) # 2. or Run on Sever instead mdl = connect . analyse_and_extract ( 'ws://ibkpika.ethz.ch:8080/api/compute' , mdl , software = 'abaqus' , fields = [ 'sf' , 'sm' ]) # ... Analyse_and_extract can either be executed locally (1.) or remotely (2.). Remote and local invocations accept the same set of compas FEA parameters. The connection layer strucenglib-connect acts as a proxy which serializes and forwards model data to the remote server.","title":"Generated Code"},{"location":"strucenglib_plugin/server/#source-code","text":"The server component and more implementation details are available on GitHub .","title":"Source Code"},{"location":"strucenglib_plugin/server_analyze_and_extract.py/","text":"# This is auto generated code by StrucEngLib Plugin 0.0.13 # Find source at https://github.com/kfmResearch-NumericsTeam/StrucEng_Library_Plug_in # Code generated at 2023-01-22T19:11:52.3331205+01:00 # Issued by user Andrin # Action: Generate LinFe Code from compas_fea.cad import rhino from compas_fea.structure import ElasticIsotropic from compas_fea.structure import ElementProperties as Properties from compas_fea.structure import GeneralStep from compas_fea.structure import GravityLoad from compas_fea.structure import AreaLoad from compas_fea.structure import PointLoad from compas_fea.structure import GeneralDisplacement from compas_fea.structure import FixedDisplacement from compas_fea.structure import FixedDisplacementXX from compas_fea.structure import FixedDisplacementYY from compas_fea.structure import FixedDisplacementZZ from compas_fea.structure import PinnedDisplacement from compas_fea.structure import RollerDisplacementX from compas_fea.structure import RollerDisplacementY from compas_fea.structure import RollerDisplacementZ from compas_fea.structure import RollerDisplacementXY from compas_fea.structure import RollerDisplacementYZ from compas_fea.structure import RollerDisplacementXZ from compas_fea.structure import ShellSection from compas_fea.structure import Structure from strucenglib_connect import connect # Snippets based on code of Andrew Liew (github.com/andrewliew), Benjamin Berger (github.com/Beberger) name = 'Rahmen' path = 'C:\\Temp \\\\ ' mdl = Structure ( name = name , path = path ) # Elements rhino . add_nodes_elements_from_layers ( mdl , mesh_type = 'ShellElement' , layers = [ 'elset_deck' , 'elset_wall_right' , 'elset_wall_left' ] ) mdl . elements [ 0 ] . axes . update ({ 'ex' : [ 1 , 0 , 0 ], 'ey' : [ 0 , - 1 , 0 ], 'ez' : [ 0 , 0 , - 1 ]}) # for layer: elset_deck mdl . elements [ 100 ] . axes . update ({ 'ex' : [ 0 , 0 , 1 ], 'ey' : [ 0 , - 1 , 0 ], 'ez' : [ 1 , 0 , 0 ]}) # for layer: elset_wall_right mdl . elements [ 200 ] . axes . update ({ 'ex' : [ 0 , 0 , - 1 ], 'ey' : [ 0 , - 1 , 0 ], 'ez' : [ - 1 , 0 , 0 ]}) # for layer: elset_wall_left # Sets rhino . add_sets_from_layers ( mdl , layers = [ 'nset_pinned' ] ) # Materials mdl . add ( ElasticIsotropic ( name = 'elset_deck_element_mat_elastic' , E = 33700 , v = 0.0 , p = 2500 / 10 ** 9 )) # for layer: elset_deck mdl . add ( ElasticIsotropic ( name = 'elset_wall_right_element_mat_elastic' , E = 33700 , v = 0.0 , p = 2500 / 10 ** 9 )) # for layer: elset_wall_right mdl . add ( ElasticIsotropic ( name = 'elset_wall_left_element_mat_elastic' , E = 33700 , v = 0.0 , p = 2500 / 10 ** 9 )) # for layer: elset_wall_left # Sections mdl . add ( ShellSection ( name = 'elset_deck_element_sec' , t = 100 )) # for layer: elset_deck mdl . add ( ShellSection ( name = 'elset_wall_right_element_sec' , t = 100 )) # for layer: elset_wall_right mdl . add ( ShellSection ( name = 'elset_wall_left_element_sec' , t = 100 )) # for layer: elset_wall_left # Properties mdl . add ( Properties ( name = 'elset_deck_element_prop' , material = 'elset_deck_element_mat_elastic' , section = 'elset_deck_element_sec' , elset = 'elset_deck' )) mdl . add ( Properties ( name = 'elset_wall_right_element_prop' , material = 'elset_wall_right_element_mat_elastic' , section = 'elset_wall_right_element_sec' , elset = 'elset_wall_right' )) mdl . add ( Properties ( name = 'elset_wall_left_element_prop' , material = 'elset_wall_left_element_mat_elastic' , section = 'elset_wall_left_element_sec' , elset = 'elset_wall_left' )) # Displacements mdl . add ([ PinnedDisplacement ( name = 'nset_pinned_set_disp' , nodes = 'nset_pinned' ), ]) # Loads mdl . add ( GravityLoad ( name = 'load_0_gravity' , x = 0.0 , y = 0.0 , z = 1.0 , elements = [ 'elset_deck' , 'elset_wall_right' , 'elset_wall_left' ] )) mdl . add ( AreaLoad ( name = 'load_1_area' , elements = [ 'elset_deck' ] , z = 0.03 , axes = 'local' )) # Steps mdl . add ([ GeneralStep ( name = 'step_1' , displacements = [ 'nset_pinned_set_disp' ] , nlgeom = False ), GeneralStep ( name = 'step_2' , loads = [ 'load_1_area' ] , nlgeom = False ), ]) mdl . steps_order = [ 'step_1' , 'step_2' ] # Summary mdl . summary () # Run on Sever ws://ibkpika.ethz.ch:8080 mdl = connect . analyse_and_extract ( 'ws://ibkpika.ethz.ch:8080/api/compute' , mdl , software = 'abaqus' , fields = [ 'sf' , 'sm' ] ) # Plot Step step_1 # Plot Step step_2 rhino . plot_data ( mdl , step = 'step_2' , field = 'sf1' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sf2' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sf3' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sf4' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sf5' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sm1' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sm2' , cbar_size = 1 ) rhino . plot_data ( mdl , step = 'step_2' , field = 'sm3' , cbar_size = 1 )","title":"Server analyze and extract.py"},{"location":"strucenglib_plugin/developer/developer/","text":"Developer Notes The source code of the Rhino Plugin is available on Github . Build The build system is captured in a vagrant image. Please consider the notes in /tools/vagrant in the source distribution for the setup of the vagrant container. There is a Github Action which reuses the same vagrant setup scripts to build and test StrucEng Lib on each commit. $ git clone git@github.com:StrucEng-Library-kfmresearch/strucenglib-rhino3d-plugin.git && cd strucenglib-rhino3d-plugin $ vagrant up $ ./distrib_vagrant.sh help + vagrant ssh -c 'cd /vagrant/tools/distrib/; ./distrib.sh help' distrib.sh: ./distrib.sh {update_version|version|build|package|deploy_test|deploy|distrib|distrib_test} commands: update_version <version>.....: updates version version......................: list version build........................: build dotnet solution test.........................: build dotnet solution, run tests package......................: builds solution, creates yak package format deploy_test..................: deploys the yak package found to test store deploy.......................: deploys the yak package found store distrib......................: builds, packages, deploys package to store distrib_test.................: builds, packages, deploys package to test store Connection to 127.0.0.1 closed. Release StrucEng Lib Release management is captured in /tools/distrib/ . Rhino uses a proprietary package manager, yak.exe , to create a packaged artifact and publish to Rhino store. Github Workflows distrib.sh build (CI) Main Build workflow, uses vagrant build script to build the project in an ubuntu-box. This ensures continuous integration and checks that the build is reproducible. dotnet build (CI) Builds the solution with dotnet and powershell. This is for testing to ensure a build outside of vagrant box. Deploy (CD) This action captures the process to deploy into Rhino store. It builds and tests the source tree with a new version and deploys the artifacts into Rhino store. This can be used if built tools are not installed on the local machine. Design Notes StrucEng Lib Plugin implements a MVVM pattern to separate UI boiler plate code from presentation and business logic. Since UI code is described in C#, it is a key goal to keep UI code as simple and straight forward as possible. To unify code, we align with the following key decisions: Eto components are described in C#. A view containing constructions of Eto component is suffixed with View . Eto components in View classes use bindings to sync their state with a ViewModel . If an action is not complicated, a ViewModel may implement it directly with a RelayCommand . Otherwise the action is implemented in a class prefixed with Exec . Action classes inherit from CommandBase . Every ViewModel inherits from StrucEngLib#ViewModelBase and is suffixed with ViewModel . Where possible, every View contains a corresponding ViewModel class. A ViewModel is instantiated first and typically stored for later access in a shared context class. A ViewModel is then passed via constructor when instantiating a View class. There are two ways to sync model state with view model state: Classes (for instance those for LinFE) sync view model state on every change to their corresponding model class. This is a decision up to each class. To unify sync, a ViewModel may choose to implement ViewModelBase#UpdateModel and ViewModelBase#UpdateViewModel to sync state. These methods are called after init and before code emit. Updating Sandwich Model The dependency installer will download the latest state of SandwichModel located in branch strucenglib_plugin . Any changes committed to this branch will be used upon reinstallation of dependency with dependency installer.","title":"Documentation"},{"location":"strucenglib_plugin/developer/developer/#developer-notes","text":"The source code of the Rhino Plugin is available on Github .","title":"Developer Notes"},{"location":"strucenglib_plugin/developer/developer/#build","text":"The build system is captured in a vagrant image. Please consider the notes in /tools/vagrant in the source distribution for the setup of the vagrant container. There is a Github Action which reuses the same vagrant setup scripts to build and test StrucEng Lib on each commit. $ git clone git@github.com:StrucEng-Library-kfmresearch/strucenglib-rhino3d-plugin.git && cd strucenglib-rhino3d-plugin $ vagrant up $ ./distrib_vagrant.sh help + vagrant ssh -c 'cd /vagrant/tools/distrib/; ./distrib.sh help' distrib.sh: ./distrib.sh {update_version|version|build|package|deploy_test|deploy|distrib|distrib_test} commands: update_version <version>.....: updates version version......................: list version build........................: build dotnet solution test.........................: build dotnet solution, run tests package......................: builds solution, creates yak package format deploy_test..................: deploys the yak package found to test store deploy.......................: deploys the yak package found store distrib......................: builds, packages, deploys package to store distrib_test.................: builds, packages, deploys package to test store Connection to 127.0.0.1 closed.","title":"Build"},{"location":"strucenglib_plugin/developer/developer/#release","text":"StrucEng Lib Release management is captured in /tools/distrib/ . Rhino uses a proprietary package manager, yak.exe , to create a packaged artifact and publish to Rhino store.","title":"Release"},{"location":"strucenglib_plugin/developer/developer/#github-workflows","text":"","title":"Github Workflows"},{"location":"strucenglib_plugin/developer/developer/#distribsh-build-ci","text":"Main Build workflow, uses vagrant build script to build the project in an ubuntu-box. This ensures continuous integration and checks that the build is reproducible.","title":"distrib.sh build (CI)"},{"location":"strucenglib_plugin/developer/developer/#dotnet-build-ci","text":"Builds the solution with dotnet and powershell. This is for testing to ensure a build outside of vagrant box.","title":"dotnet build (CI)"},{"location":"strucenglib_plugin/developer/developer/#deploy-cd","text":"This action captures the process to deploy into Rhino store. It builds and tests the source tree with a new version and deploys the artifacts into Rhino store. This can be used if built tools are not installed on the local machine.","title":"Deploy (CD)"},{"location":"strucenglib_plugin/developer/developer/#design-notes","text":"StrucEng Lib Plugin implements a MVVM pattern to separate UI boiler plate code from presentation and business logic. Since UI code is described in C#, it is a key goal to keep UI code as simple and straight forward as possible. To unify code, we align with the following key decisions: Eto components are described in C#. A view containing constructions of Eto component is suffixed with View . Eto components in View classes use bindings to sync their state with a ViewModel . If an action is not complicated, a ViewModel may implement it directly with a RelayCommand . Otherwise the action is implemented in a class prefixed with Exec . Action classes inherit from CommandBase . Every ViewModel inherits from StrucEngLib#ViewModelBase and is suffixed with ViewModel . Where possible, every View contains a corresponding ViewModel class. A ViewModel is instantiated first and typically stored for later access in a shared context class. A ViewModel is then passed via constructor when instantiating a View class. There are two ways to sync model state with view model state: Classes (for instance those for LinFE) sync view model state on every change to their corresponding model class. This is a decision up to each class. To unify sync, a ViewModel may choose to implement ViewModelBase#UpdateModel and ViewModelBase#UpdateViewModel to sync state. These methods are called after init and before code emit.","title":"Design Notes"},{"location":"strucenglib_plugin/developer/developer/#updating-sandwich-model","text":"The dependency installer will download the latest state of SandwichModel located in branch strucenglib_plugin . Any changes committed to this branch will be used upon reinstallation of dependency with dependency installer.","title":"Updating Sandwich Model"},{"location":"strucenglib_plugin/developer/python_developer_mode/","text":"Python Developer Mode Starting from version 0.0.21, the strucenglib Rhino 3D plugin includes a developer mode specifically designed to develop and test Python dependencies. In the StrucEngLibInstallDependencies dialog, a new section called Developer has been introduced: The developer mode allows you to install local git repositories into the Python virtual environment. This feature enables you to modify and test Python dependencies without requiring a new version release. The following table lists the available Python dependencies along with their respective repository links: Name Repository Strucenglib Snippet Collection https://github.com/StrucEng-Library-kfmresearch/strucenglib-snippets.git Strucenglib Connection Layer https://github.com/StrucEng-Library-kfmresearch/strucenglib-connect.git Strucenglib Compas Fork https://github.com/StrucEng-Library-kfmresearch/compas.git Strucenglib Compas FEA1 Fork https://github.com/StrucEng-Library-kfmresearch/compas_fea.git Install Development Dependencies To enable the developer mode, you can clone one or all of the Python dependencies mentioned above. For example: git clone https://github.com/StrucEng-Library-kfmresearch/strucenglib-snippets.git In the StrucEngLibInstallDependencies dialog in Rhino 3D, select the location of the cloned git repository on your disk. Then, press the Install Dependencies button. The installer will link your git repository to the virtual environment. This ensures that any changes made in the git repository are reflected in the Python virtual environment within Rhino 3D. Note The installer functions as a shorthand for the pip command: pip install -e \"location of git repository\" You can verify the target location of the symbolic links in the Rhino scripts directory by clicking on Rhino Scripts Directory . In the screenshot above, you can observe that all Rhino 3D script links refer to git repositories. Now, you can edit Python source files in the git repositories and immediately access the changes in Rhino 3D. Remarks Once you have set up the git development dependencies, you should no longer link other directories in Rhino's Module Search Paths, as illustrated below: Uninstall Development Dependencies To uninstall development dependencies, reinstall for Abaqus or Ansys by pressing one of the buttons Install for Abaqus or Install for Ansys .","title":"Python Developer Mode"},{"location":"strucenglib_plugin/developer/python_developer_mode/#python-developer-mode","text":"Starting from version 0.0.21, the strucenglib Rhino 3D plugin includes a developer mode specifically designed to develop and test Python dependencies. In the StrucEngLibInstallDependencies dialog, a new section called Developer has been introduced: The developer mode allows you to install local git repositories into the Python virtual environment. This feature enables you to modify and test Python dependencies without requiring a new version release. The following table lists the available Python dependencies along with their respective repository links: Name Repository Strucenglib Snippet Collection https://github.com/StrucEng-Library-kfmresearch/strucenglib-snippets.git Strucenglib Connection Layer https://github.com/StrucEng-Library-kfmresearch/strucenglib-connect.git Strucenglib Compas Fork https://github.com/StrucEng-Library-kfmresearch/compas.git Strucenglib Compas FEA1 Fork https://github.com/StrucEng-Library-kfmresearch/compas_fea.git","title":"Python Developer Mode"},{"location":"strucenglib_plugin/developer/python_developer_mode/#install-development-dependencies","text":"To enable the developer mode, you can clone one or all of the Python dependencies mentioned above. For example: git clone https://github.com/StrucEng-Library-kfmresearch/strucenglib-snippets.git In the StrucEngLibInstallDependencies dialog in Rhino 3D, select the location of the cloned git repository on your disk. Then, press the Install Dependencies button. The installer will link your git repository to the virtual environment. This ensures that any changes made in the git repository are reflected in the Python virtual environment within Rhino 3D. Note The installer functions as a shorthand for the pip command: pip install -e \"location of git repository\" You can verify the target location of the symbolic links in the Rhino scripts directory by clicking on Rhino Scripts Directory . In the screenshot above, you can observe that all Rhino 3D script links refer to git repositories. Now, you can edit Python source files in the git repositories and immediately access the changes in Rhino 3D.","title":"Install Development Dependencies"},{"location":"strucenglib_plugin/developer/python_developer_mode/#remarks","text":"Once you have set up the git development dependencies, you should no longer link other directories in Rhino's Module Search Paths, as illustrated below:","title":"Remarks"},{"location":"strucenglib_plugin/developer/python_developer_mode/#uninstall-development-dependencies","text":"To uninstall development dependencies, reinstall for Abaqus or Ansys by pressing one of the buttons Install for Abaqus or Install for Ansys .","title":"Uninstall Development Dependencies"},{"location":"strucenglib_plugin/usage/guide/","text":"Usage Guide","title":"Usage Guide"},{"location":"strucenglib_plugin/usage/guide/#usage-guide","text":"","title":"Usage Guide"},{"location":"strucenglib_plugin/usage/troubleshooting/","text":"Windows Error: Use folder script Install anaconda new and check for error Delete virtual environment: CONDA_HOME /envs/strucenglib*. And reinstall dependencies with dependency installer.","title":"Troubleshooting"},{"location":"strucenglib_plugin/usage/troubleshooting/#windows-error","text":"Use folder script Install anaconda new and check for error Delete virtual environment: CONDA_HOME /envs/strucenglib*. And reinstall dependencies with dependency installer.","title":"Windows Error:"},{"location":"strucenglib_snippets/home/","text":"The StrucEngLib is a open source framework for the numerical analysis of engineering structures. It offers a variety of material models (linear elastic, ideal plastix, nonlinear), AI-based analysis tools, load generators, safety concepts and graphical evaluation tools, and various enhancements (connection to HPC, remote servers, user interfaces, etc.). Currently, the library only supports Ansys Mechanical APDL as backend and Rhinoceros as frontend. The package builds upon COMPAS and COMPAS FEA, an open-source Python-based framework for collaboration and research in architecture, engineering and digital fabrication. Note Note that the StrucEngLib is still under developement and therefore could contain bugs. In case you find bugs or would like to request additional functionality, please submit an issue using the Issue Tracker . You can find an example under this Link .","title":"Home"},{"location":"strucenglib_snippets/actions/buildings/","text":"Coming soon","title":"Structure"},{"location":"strucenglib_snippets/actions/fire/","text":"Coming soon","title":"Grafical outputs"},{"location":"strucenglib_snippets/actions/general/","text":"Coming soon","title":"Initialization"},{"location":"strucenglib_snippets/actions/general_generators/","text":"This page shows the functionality of the function area_load_generator_elements . Basic functionality The load area is defined using polylines in Rhino. The polyline is to be stored in a separate layer (here with the name area_load). A list of loaded elements loaded_element_numbers - corresponding to the elements whose geometric center lies within the polyline - are calculated using the function area_load_generator_elements where the string layer correspond to the name of the layer defined in Rhino. The structure object named \"mdl\" is used inside the function area_load_generator_elements to extract the element numbers. The list loaded_element_numbers can then use in the AreaLoad\"\" object provied by the compas_fea . The AreaLoad\"\" object applies distributed loads per unit area (pressure x, y, z in units of N/mm2) on elements such as ShellElement objects. The elements to apply the load to is given by the list loaded_element_numbers and the name of the AreaLoad is required for its key. Only axis='local' is currently supported for Ansys, whereby x and y are local surface shears and z is the local normal pressure. Positive/negativ loads correspond to loads in the positive/negatziv direction of the local axes. For the definition of the local axes see here . Further a Step is added to the .steps dictioniary of the Structure object with the same string key name . In a addition to the list loaded_element_numbers the loaded elements can be easily visualized via the Rhino layer, which is created during the execution of the function area_load_generator_elements . More information about the AreaLoad and Step objects can be found on the official compas_fea documentation . from compas_fea.structure import Structure from compas_fea.structure import GeneralStep from strucenglib.prepost_functions import area_load_generator_elements name = 'Example_area_load_generator_elements' path = 'C:\\Temp \\\\ ' mdl = Structure ( name = name , path = path ) # ... # Calculate Element numbers within the polyline loaded_element_numbers = area_load_generator_elements ( mdl , layer = 'area_load' ) # mdl . add ( AreaLoad ( name = 'load_pressure' , elements = 'elset_shells' , z =- 10000 , axes = 'local' )) # ... # Steps mdl . add ([ GeneralStep ( name = 'step_1' , displacements = [ 'disp_left' , 'disp_right' , 'disp_up' ], nlgeom = False ), GeneralStep ( name = 'step_2' , loads = [ 'area_load_pressure' ], increments = 1 , nlgeom = False ),]) mdl . steps_order = [ 'step_1' , 'step_2' ] # ... Example An example of how the function area_load_generator_elements can be used in a strucutral analysis is found on this [link](https://compas.dev/compas_fea/latest/tutorial.html](https://github.com/StrucEng-Library-kfmresearch/strucenglib-snippets/tree/ansys/examples/Area_load_generator_elements). Source Code The function area_load_generator_elements is hosted and described in detail on github .","title":"General generators"},{"location":"strucenglib_snippets/actions/general_generators/#basic-functionality","text":"The load area is defined using polylines in Rhino. The polyline is to be stored in a separate layer (here with the name area_load). A list of loaded elements loaded_element_numbers - corresponding to the elements whose geometric center lies within the polyline - are calculated using the function area_load_generator_elements where the string layer correspond to the name of the layer defined in Rhino. The structure object named \"mdl\" is used inside the function area_load_generator_elements to extract the element numbers. The list loaded_element_numbers can then use in the AreaLoad\"\" object provied by the compas_fea . The AreaLoad\"\" object applies distributed loads per unit area (pressure x, y, z in units of N/mm2) on elements such as ShellElement objects. The elements to apply the load to is given by the list loaded_element_numbers and the name of the AreaLoad is required for its key. Only axis='local' is currently supported for Ansys, whereby x and y are local surface shears and z is the local normal pressure. Positive/negativ loads correspond to loads in the positive/negatziv direction of the local axes. For the definition of the local axes see here . Further a Step is added to the .steps dictioniary of the Structure object with the same string key name . In a addition to the list loaded_element_numbers the loaded elements can be easily visualized via the Rhino layer, which is created during the execution of the function area_load_generator_elements . More information about the AreaLoad and Step objects can be found on the official compas_fea documentation . from compas_fea.structure import Structure from compas_fea.structure import GeneralStep from strucenglib.prepost_functions import area_load_generator_elements name = 'Example_area_load_generator_elements' path = 'C:\\Temp \\\\ ' mdl = Structure ( name = name , path = path ) # ... # Calculate Element numbers within the polyline loaded_element_numbers = area_load_generator_elements ( mdl , layer = 'area_load' ) # mdl . add ( AreaLoad ( name = 'load_pressure' , elements = 'elset_shells' , z =- 10000 , axes = 'local' )) # ... # Steps mdl . add ([ GeneralStep ( name = 'step_1' , displacements = [ 'disp_left' , 'disp_right' , 'disp_up' ], nlgeom = False ), GeneralStep ( name = 'step_2' , loads = [ 'area_load_pressure' ], increments = 1 , nlgeom = False ),]) mdl . steps_order = [ 'step_1' , 'step_2' ] # ...","title":"Basic functionality"},{"location":"strucenglib_snippets/actions/general_generators/#example","text":"An example of how the function area_load_generator_elements can be used in a strucutral analysis is found on this [link](https://compas.dev/compas_fea/latest/tutorial.html](https://github.com/StrucEng-Library-kfmresearch/strucenglib-snippets/tree/ansys/examples/Area_load_generator_elements).","title":"Example"},{"location":"strucenglib_snippets/actions/general_generators/#source-code","text":"The function area_load_generator_elements is hosted and described in detail on github .","title":"Source Code"},{"location":"strucenglib_snippets/actions/seismic/","text":"coming soon","title":"Elements"},{"location":"strucenglib_snippets/actions/self_weight/","text":"Coming soon","title":"Import packages"},{"location":"strucenglib_snippets/actions/traffic_loads/","text":"This page shows the functionality of the function Normalspurverkehr_load_generator . Assumption and Restrictions The current version of the Normalspurverkehr_load_generator has been developed for classic overpasses (frames/plate structures). The following restrictions apply: The Global origin must always be at x=0, y=0 and z=0. The Global origin must lie on the same plane as the plate. The Global origin is always on the lower left corner of the plate. Therefore the pate must extend in the positive x and y axis and lie completley in the xy plane. Loads are always defined in the direction of the local (negativ) z-direction. The local z-direction always points in the positive global z-axis The x-direction is always parallel to the edge of the plate Walls (constraints) are always parallel to the x and y axis, respectively. Functionality The railways loads are defined using numerical inputs. Currentley no grafical input via the Rhino user Interface is suppoerted. # ... # Normalspurverkehr Load generator return_values_Gleis_1 = Normalspurbahnverkehr_load_generator ( mdl , name = 'Gleis_1' , l_Pl = 10000 , h_Pl = 200 , s = 7500 , beta =- 30 , q_Gl =- 4.8 * 10000 , b_Bs = 1000 , h_Strich = 200 , Q_k =- 225 * 1000 , y_A = 5000 ) # ... # Steps mdl . add ([ GeneralStep ( name = 'step_1' , displacements = [ 'disp_left' , 'disp_right' ], nlgeom = False ), GeneralStep ( name = 'step_2' , loads = return_values_Gleis_1 , increments = 1 , nlgeom = False ), ]) mdl . steps_order = [ 'step_1' , 'step_2' ] # ... Inputs The following inputs are required: Parameter data type Description mdl object Structure Object (see Link for more information) name string Name of the load l_Pl integer Length of the plate measured between plane of the supporting walls h_Pl integer high of the plate, haunches are not considered and a homogeneous plate thickness is assumed s integer Distance bewtween global origin and start point of the track at y=0 beta integer Inclination of the track to the y-axis (positive clockwise, negative counterclockwise) q_Gl integer Dead weight of concrete sleeper and rail in N/mm b_Bs integer Width of the concrete sleeper h_Strich integer Gravel height between lower edge of railway sleeper and concrete slab Q_k integer Point load from train load model y_A integer Distance in y-direction between point load 1 and the origin Output The output (here names as return_values_Gleis_1) contains all layer names (strings) of the generated loads. The output can be assigned to the steps. The * AreaLoad is generated automatically within the function Normalspurverkehr_load_generator . In addition, the load application areas of the rails own weights and the centers of the loaded elements as well as the position of the rail loads, the corresponding load application areas and element centers are specified in separate Rhino layers. Example An example of how the function Normalspurverkehr_load_generator can be used in a structural analysis is found on this link - Source Code The function area_load_generator_elements is hosted and described in detail on github .","title":"Traffic loads"},{"location":"strucenglib_snippets/actions/traffic_loads/#assumption-and-restrictions","text":"The current version of the Normalspurverkehr_load_generator has been developed for classic overpasses (frames/plate structures). The following restrictions apply: The Global origin must always be at x=0, y=0 and z=0. The Global origin must lie on the same plane as the plate. The Global origin is always on the lower left corner of the plate. Therefore the pate must extend in the positive x and y axis and lie completley in the xy plane. Loads are always defined in the direction of the local (negativ) z-direction. The local z-direction always points in the positive global z-axis The x-direction is always parallel to the edge of the plate Walls (constraints) are always parallel to the x and y axis, respectively.","title":"Assumption and Restrictions"},{"location":"strucenglib_snippets/actions/traffic_loads/#functionality","text":"The railways loads are defined using numerical inputs. Currentley no grafical input via the Rhino user Interface is suppoerted. # ... # Normalspurverkehr Load generator return_values_Gleis_1 = Normalspurbahnverkehr_load_generator ( mdl , name = 'Gleis_1' , l_Pl = 10000 , h_Pl = 200 , s = 7500 , beta =- 30 , q_Gl =- 4.8 * 10000 , b_Bs = 1000 , h_Strich = 200 , Q_k =- 225 * 1000 , y_A = 5000 ) # ... # Steps mdl . add ([ GeneralStep ( name = 'step_1' , displacements = [ 'disp_left' , 'disp_right' ], nlgeom = False ), GeneralStep ( name = 'step_2' , loads = return_values_Gleis_1 , increments = 1 , nlgeom = False ), ]) mdl . steps_order = [ 'step_1' , 'step_2' ] # ...","title":"Functionality"},{"location":"strucenglib_snippets/actions/traffic_loads/#inputs","text":"The following inputs are required: Parameter data type Description mdl object Structure Object (see Link for more information) name string Name of the load l_Pl integer Length of the plate measured between plane of the supporting walls h_Pl integer high of the plate, haunches are not considered and a homogeneous plate thickness is assumed s integer Distance bewtween global origin and start point of the track at y=0 beta integer Inclination of the track to the y-axis (positive clockwise, negative counterclockwise) q_Gl integer Dead weight of concrete sleeper and rail in N/mm b_Bs integer Width of the concrete sleeper h_Strich integer Gravel height between lower edge of railway sleeper and concrete slab Q_k integer Point load from train load model y_A integer Distance in y-direction between point load 1 and the origin","title":"Inputs"},{"location":"strucenglib_snippets/actions/traffic_loads/#output","text":"The output (here names as return_values_Gleis_1) contains all layer names (strings) of the generated loads. The output can be assigned to the steps. The * AreaLoad is generated automatically within the function Normalspurverkehr_load_generator . In addition, the load application areas of the rails own weights and the centers of the loaded elements as well as the position of the rail loads, the corresponding load application areas and element centers are specified in separate Rhino layers.","title":"Output"},{"location":"strucenglib_snippets/actions/traffic_loads/#example","text":"An example of how the function Normalspurverkehr_load_generator can be used in a structural analysis is found on this link -","title":"Example"},{"location":"strucenglib_snippets/actions/traffic_loads/#source-code","text":"The function area_load_generator_elements is hosted and described in detail on github .","title":"Source Code"},{"location":"strucenglib_snippets/basics/overview/","text":"Coming soon","title":"Overview"},{"location":"strucenglib_snippets/basics/workflow/","text":"Coming soon","title":"Workflow"},{"location":"strucenglib_snippets/concrete_structures/code_checks/","text":"Coming soon","title":"Code checks"},{"location":"strucenglib_snippets/concrete_structures/material_models/","text":"Coming soon","title":"Analysis"},{"location":"strucenglib_snippets/developer_notes/documentation/","text":"Coming Soon","title":"Documentation"},{"location":"strucenglib_snippets/examples/all_functionalities/","text":"Donwload an exampel in Rhino using Ansys MAPDL: https://github.com/StrucEng-Library-kfmresearch/strucenglib-snippets/tree/ansys/examples/Example_with_all_functionalities","title":"Example 1"},{"location":"strucenglib_snippets/grafical_outputs/numerical_results/","text":"Coming soon","title":"Numerical results"},{"location":"strucenglib_snippets/grafical_outputs/prepost_plots/","text":"Coming soon","title":"Prepost plots"},{"location":"strucenglib_snippets/masonry_structures/code_checks/","text":"","title":"Code checks"},{"location":"strucenglib_snippets/masonry_structures/material_models/","text":"Coming soon","title":"Visualization"},{"location":"strucenglib_snippets/saftey_concepts/ecov/","text":"Coming soon","title":"Ecov"},{"location":"strucenglib_snippets/saftey_concepts/psf/","text":"Coming Soon","title":"Psf"}]}